@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System.Linq;

@inherits PanelComponent

<root>
	<div class="button_container">
		@if(Manager.PrevScene != null)
		{
			<div class="button" onclick="@( () => PrevLevelClicked() )">@("<")</div>
		}
		
		<div class="level_name">@(Manager.LevelName)</div>

		@if(Manager.NextScene != null)
		{
			<div class="button" style="
				opacity:@(Manager.NumLevelsCompleted > Manager.LevelNum ? 1f : 0.5f); 
				background-color:@(Manager.NumLevelsCompleted > Manager.LevelNum ? new Color(0f, 0f, 1f, 0.08f).Rgba : new Color(0.1f, 0.1f, 0.7f, 0.09f).Rgba);
				padding-bottom: @(Manager.NumLevelsCompleted > Manager.LevelNum ? 0f : 5f)px;
			"
				 onclick="@( () => NextLevelClicked() )">
				@(Manager.NumLevelsCompleted > Manager.LevelNum ? (Manager.LevelNum == 6 ? "🏆" : ">") : "🔒")
			</div>
		}
		
	</div>

	<div class="pointer"></div>
</root>

@code
{
	public Manager Manager { get; set; }

	protected override void OnEnabled()
	{
		base.OnEnabled();

		Manager = Scene.GetAllComponents<Manager>().FirstOrDefault();
	}

	void PrevLevelClicked()
	{
		Manager.LoadPrevLevel();
	}

	void NextLevelClicked()
	{
		if (Manager.NumLevelsCompleted > Manager.LevelNum)
			Manager.LoadNextLevel();
		else
			Sound.Play("lock_rattle");
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
